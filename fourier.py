# -*- coding: utf-8 -*-
"""Fourier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dM7nHMlUK3GCzH_XxFrWv3f5ZlkvjHan
"""

import numpy as np
import cv2
import matplotlib.pyplot as plt
import os

def process_fourier_transforms(image_path, output_dir='fourier_outputs'):
    # Create output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)

    # Read the image with error handling
    try:
        # Read image in grayscale
        img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

        if img is None:
            raise ValueError("Could not read the image. Check file format and integrity.")

        # Resize image to a consistent size
        img = cv2.resize(img, (512, 512), interpolation=cv2.INTER_AREA)

    except Exception as e:
        print(f"Error processing image: {e}")
        return

    # Fourier Transform processing functions
    def apply_transform(img, operation='standard'):
        # Compute 2D Fourier Transform
        f = np.fft.fft2(img)
        fshift = np.fft.fftshift(f)

        # Different transform operations
        if operation == 'standard':
            # Log magnitude spectrum
            return 20 * np.log(np.abs(fshift) + 1)

        elif operation == 'highpass':
            # High-pass filter
            rows, cols = img.shape
            crow, ccol = rows//2, cols//2
            mask = np.ones((rows, cols), np.uint8)
            mask[crow-30:crow+30, ccol-30:ccol+30] = 0
            fshift = fshift * mask
            f_ishift = np.fft.ifftshift(fshift)
            return np.abs(np.fft.ifft2(f_ishift))

        elif operation == 'lowpass':
            # Low-pass filter
            rows, cols = img.shape
            crow, ccol = rows//2, cols//2
            mask = np.zeros((rows, cols), np.uint8)
            mask[crow-30:crow+30, ccol-30:ccol+30] = 1
            fshift = fshift * mask
            f_ishift = np.fft.ifftshift(fshift)
            return np.abs(np.fft.ifft2(f_ishift))

        elif operation == 'phase':
            # Phase spectrum
            return np.angle(fshift)

        elif operation == 'magnitude':
            # Magnitude spectrum
            return np.abs(fshift)

        elif operation == 'log_magnitude':
            # Logarithmic magnitude spectrum
            return np.log1p(np.abs(fshift))

        elif operation == 'bandpass':
            # Band-pass filter
            rows, cols = img.shape
            crow, ccol = rows//2, cols//2
            mask = np.zeros((rows, cols), np.uint8)
            mask[crow-50:crow+50, ccol-50:ccol+50] = 1
            mask[crow-20:crow+20, ccol-20:ccol+20] = 0
            fshift = fshift * mask
            f_ishift = np.fft.ifftshift(fshift)
            return np.abs(np.fft.ifft2(f_ishift))

        elif operation == 'directional':
            # Directional filter
            rows, cols = img.shape
            crow, ccol = rows//2, cols//2
            mask = np.zeros((rows, cols), np.uint8)
            cv2.line(mask, (ccol-100, crow), (ccol+100, crow), 1, 5)
            fshift = fshift * mask
            f_ishift = np.fft.ifftshift(fshift)
            return np.abs(np.fft.ifft2(f_ishift))

        elif operation == 'original':
            return img

    # Define operations and their titles
    operations = [
        ('original', 'Original Image'),
        ('standard', 'Standard FFT'),
        ('phase', 'Phase Spectrum'),
        ('magnitude', 'Magnitude Spectrum'),
        ('log_magnitude', 'Log Magnitude'),
        ('lowpass', 'Low-Pass Filter'),
        ('highpass', 'High-Pass Filter'),
        ('bandpass', 'Band-Pass Filter'),
        ('directional', 'Directional Filter')
    ]

    # Create visualizations
    plt.figure(figsize=(15, 15))
    for idx, (op, title) in enumerate(operations, 1):
        # Apply transform
        transformed = apply_transform(img, op)

        # Create subplot
        plt.subplot(3, 3, idx)

        # Choose appropriate colormap
        if title == 'Original Image':
            plt.imshow(transformed, cmap='gray')
        else:
            plt.imshow(transformed, cmap='viridis')

        plt.title(title)
        plt.axis('off')

    # Adjust layout and save
    plt.tight_layout()
    output_path = os.path.join(output_dir, 'fourier_transforms.png')
    plt.savefig(output_path, dpi=300, bbox_inches='tight')
    plt.close()

    print(f"Fourier Transform visualizations saved to {output_path}")

# Example usage
if __name__ == "__main__":
    # Replace with your image path
    process_fourier_transforms("/content/laddu.jpg")